#! /usr/bin/env python
# -*- coding: utf-8 -*-
from __future__ import division
import os
import sys
import re
from math import cos, radians, sin

# Assumes SolidPython is in site-packages or elsewhwere in sys.path
from solid import *
from solid.utils import *

SEGMENTS = 32

e = 0.001

center_x = 107.500 + 2.5
center_x_pcb = (159.766 + 90.424)/2

joystick_y = 44.712 + 16
joystick_y_pcb= 217.424

pcb_x_offset = center_x_pcb - center_x
pcb_y_offset = joystick_y_pcb - joystick_y

# Overall height
oah = 40
hole_h = 50
pcb_z = 10

outline = [1168,5479,1163,5477,1159,5473,1158,5468,1160,5463,1161,5461,1128,5424,1129,5423,1091,5371,1048,5306,1049,5306,1002,5228,1002,5227,952,5137,899,5036,843,4925,844,4925,786,4804,727,4675,667,4538,668,4537,607,4393,547,4243,488,4087,429,3927,430,3927,373,3763,318,3597,319,3597,267,3428,218,3258,219,3258,174,3088,174,3087,133,2918,133,2917,98,2749,67,2582,68,2582,43,2418,25,2258,14,2103,11,2027,10,1953,11,1880,14,1809,19,1739,20,1739,27,1672,36,1606,37,1606,48,1543,49,1543,63,1481,80,1422,99,1366,121,1312,145,1260,146,1260,173,1211,173,1212,247,1098,312,1001,313,1001,372,918,427,847,428,847,481,786,482,786,535,734,591,688,651,646,717,606,718,606,792,566,877,524,974,478,975,478,1215,367,1362,297,1531,216,1531,218,1796,156,2059,96,2189,70,2319,47,2448,28,2448,29,2577,16,2641,12,2705,10,2705,11,2768,10,2768,11,2832,13,2895,17,2895,18,2958,24,2958,25,3021,34,3083,46,3146,61,3208,78,3208,79,3270,99,3270,100,3332,123,3331,124,3393,151,3454,181,3454,182,3516,216,3515,216,3576,254,3578,249,3578,248,3976,249,3975,243,3971,240,3966,239,3966,238,3971,240,3975,244,3976,249,3976,250,3977,250,3977,247,3978,247,3977,253,3974,257,3969,258,3968,258,3968,259,3973,257,3977,253,3978,249,4376,248,4375,243,4436,206,4497,172,4559,142,4559,143,4621,116,4683,92,4683,93,4745,73,4808,56,4870,42,4933,30,4933,31,4996,22,5059,16,5122,12,5186,10,5186,11,5249,11,5313,13,5377,17,5377,18,5505,31,5634,50,5764,73,5764,74,5894,101,6157,161,6422,222,6421,224,6736,376,6975,488,7071,535,7155,578,7228,619,7293,660,7293,661,7352,703,7351,704,7406,751,7406,752,7459,804,7458,805,7512,866,7568,937,7567,937,7628,1020,7695,1116,7772,1228,7771,1229,7797,1278,7821,1330,7820,1330,7842,1384,7841,1385,7860,1441,7860,1442,7876,1501,7890,1562,7889,1562,7901,1626,7900,1626,7910,1692,7909,1692,7916,1759,7921,1829,7923,1900,7924,1973,7923,2047,7922,2047,7919,2123,7907,2278,7888,2438,7863,2602,7832,2768,7796,2937,7755,3107,7710,3277,7661,3447,7609,3616,7555,3782,7498,3946,7439,4106,7379,4262,7319,4412,7259,4556,7258,4556,7199,4693,7198,4693,7139,4822,7082,4943,7081,4943,7026,5054,6972,5155,6922,5245,6875,5323,6832,5388,6831,5388,6793,5439,6759,5476,6756,5472,6756,5469,5557,5464,3958,5462,3956,5462,2357,5464,1158,5469,1159,5463,1161,5461,1135,5431]

inline = [6432,5168,6427,5166,6423,5162,6422,5158,5754,5153,5085,5151,3749,5149,1075,5155,1077,5150,1080,5146,1023,5060,970,4972,919,4882,870,4791,823,4699,824,4699,779,4606,736,4512,695,4418,616,4226,540,4034,541,4034,394,3649,395,3649,312,3402,273,3278,235,3152,236,3152,200,3027,167,2900,137,2773,109,2646,84,2518,62,2389,63,2389,44,2261,30,2131,19,2002,12,1872,13,1872,10,1742,12,1611,13,1611,17,1563,18,1563,24,1515,33,1467,43,1419,44,1419,56,1372,70,1325,86,1279,87,1279,104,1234,124,1189,145,1145,192,1059,192,1060,245,977,246,978,304,899,355,829,356,829,413,764,413,765,475,704,475,705,541,649,542,650,612,599,612,600,686,555,686,556,763,517,764,517,844,484,844,483,1053,384,1158,334,1159,334,1264,286,1371,242,1372,242,1480,202,1536,185,1591,169,1591,170,1648,156,1705,144,1854,111,2005,79,2157,50,2157,51,2233,38,2233,39,2309,28,2385,20,2461,14,2461,15,2538,11,2538,12,2614,12,2690,15,2690,16,2766,23,2842,34,2842,35,2917,50,2974,63,2974,64,3030,80,3030,81,3085,100,3084,100,3139,122,3138,123,3192,147,3191,147,3244,173,3244,174,3346,230,3346,228,3374,237,3375,237,3403,243,3403,242,3460,251,3460,250,3518,252,3576,251,3576,250,3693,245,3693,246,3751,246,3809,250,3933,251,4057,250,4119,247,4181,242,4181,241,4242,233,4303,221,4302,218,4371,175,4372,176,4444,138,4518,106,4519,106,4594,79,4595,79,4672,57,4751,39,4751,40,4830,26,4911,17,4992,11,4992,12,5073,10,5154,12,5154,13,5235,18,5316,26,5316,27,5396,38,5475,52,5475,53,5554,69,5794,116,5914,143,6033,173,6032,174,6150,208,6149,209,6265,249,6264,249,6321,272,6377,297,6432,323,6432,324,6487,352,6487,351,6600,401,6713,453,6826,508,6825,508,6881,537,6880,538,6935,568,6934,569,6987,601,6987,602,7038,636,7088,673,7135,712,7135,713,7181,754,7180,755,7224,799,7223,799,7264,846,7263,847,7301,897,7364,979,7363,980,7421,1066,7420,1066,7447,1110,7446,1111,7471,1156,7494,1202,7494,1203,7515,1250,7534,1298,7551,1346,7566,1396,7579,1446,7578,1446,7589,1496,7588,1496,7596,1547,7601,1598,7604,1650,7608,1733,7607,1733,7608,1815,7607,1897,7606,1897,7603,1979,7602,1979,7596,2061,7588,2143,7566,2306,7538,2469,7538,2468,7506,2630,7505,2630,7470,2791,7434,2951,7433,2951,7397,3088,7358,3225,7317,3362,7274,3497,7229,3633,7229,3632,7182,3767,7133,3900,7081,4033,7028,4165,6972,4296,6915,4426,6855,4555,6794,4684,6793,4684,6730,4811,6664,4937,6596,5062,6595,5061,6582,5079,6583,5080,6570,5100,6558,5121,6557,5120,6544,5140,6542,5139,6527,5155,6526,5153,6508,5164,6507,5161,6497,5164,6496,5162,6485,5164,6485,5162,6473,5161,6474,5159,6460,5156,6460,5158,6422,5158,6382,5157]


def cylinder_at(x, y, d, h):
    return translate([x, y, 0])(cylinder(d = d, h = h))

# Cube centered in x/y
def c2cube(w, h, d):
    return translate([-w/2, -h/2, 0])(cube([w, h, d]))

def pot(x, y):
    return translate([x, y, 0])(cylinder(d = 8, h = hole_h))

def pushbutton(x, y):
    return translate([x, y, 0])(cylinder(d = 14.25, h = hole_h))

def joystick_h(x, y):
    return translate([x, y, 0])(cylinder(d = 28, h = hole_h))

def toggle(x, y):
    return translate([x, y, 0])(cylinder(d = 6, h = hole_h))

def holes():
    pot1 = pot(61.393 + 6.552/2, 94.327 + 6.552/2)
    pot2 = pot(151.638 + 6.552/2, 94.327 + 6.552/2)
    pb1l = pushbutton(33.404 + 12.5/2, 105.761 + 12.5/2)
    pb2l = pushbutton(27.333 + 12.5/2, 84.594 + 12.5/2)
    pb3l = pushbutton(20.75 + 12.5/2, 63.428 + 12.5/2)
    pb1r = pushbutton(173.679 + 12.5/2, 105.761 + 12.5/2)
    pb2r = pushbutton(179.750 + 12.5/2, 84.594 + 12.5/2)
    pb3r = pushbutton(186.333 + 12.5/2, 63.428 + 12.5/2)
    jlh = joystick_h(53.583 + 16, joystick_y)
    jrh = joystick_h(134 + 16, joystick_y)
    toggle1 = toggle(40.871 + 3, 134.590 + 4)
    toggle2 = toggle(60.287 + 3, 134.590 + 4)
    toggle3 = toggle(153.296 + 3, 134.590 + 4)
    toggle4 = toggle(172.713 + 3, 134.590 + 4)
    holes1 = pot1 + pot2 + pb1l + pb2l + pb3l + pb1r + pb2r + pb3r
    holes2 = jlh + jrh + toggle1 + toggle2 + toggle3 + toggle4
    slide = translate([center_x - 5/2, joystick_y - 1 - 12/2, 0])(cube([5, 12, hole_h]))
    # 2 mm right of center
    display_w = 34
    display_bottom_y = joystick_y + 25.9 + 37.85
    display = translate([center_x - display_w/2 + 2, display_bottom_y, 0])(cube([display_w, 16, hole_h]))
    return holes1 + holes2 + slide + display

def pcbsupport(x, y):
    return cylinder_at(x, y, 3, pcb_z)

def pcbmounts():
    p1 = pcbsupport(42, 63.428 + 12.5/2)
    return p1

def circle_p(num_points=10, rad=2):
    circle_pts = []
    for i in range(2 * num_points):
        angle = radians(360 / (2 * num_points) * i)
        circle_pts.append(Point3(rad * cos(angle), rad * sin(angle), 0))
    return circle_pts

def square_p(rad=2):
    square_pts = []
    square_pts.append(Point3(-rad, -rad, 0))
    square_pts.append(Point3(rad, -rad, 0))
    square_pts.append(Point3(rad, rad, 0))
    square_pts.append(Point3(-rad, rad, 0))
    return square_pts

def outer_shape():
    is_x = True
    c = []
    points = []
    scale = 0.025
    for val in outline:
        if is_x:
            c.append(11 + val*scale)
            is_x = False
        else:
            c.append(14.758 + val*scale)
            points.append(c)
            c = []
            is_x = True
    return points

def inner_shape():
    is_x = True
    c = []
    points = []
    scale = 0.025
    for val in inline:
        if is_x:
            c.append(15 + val*scale)
            is_x = False
        else:
            c.append(18 + val*scale)
            points.append(c)
            c = []
            is_x = True
    return points

def shell():
    rr=3
    points = outer_shape()
    top_shape = circle_p(num_points=10, rad=rr)
    top_brim = up(oah - 2*rr)(extrude_along_path(shape_pts = top_shape, path_pts = points))
    bot_shape = square_p(rad=rr)
    bot_brim = extrude_along_path(shape_pts = bot_shape, path_pts = points)
    return hull()(bot_brim, top_brim)

def void():
    rr = 2
    th = 2
    points = inner_shape()
    top_shape = circle_p(num_points=10, rad=rr)
    top_brim = up(oah - 2*rr - th)(extrude_along_path(shape_pts = top_shape, path_pts = points))
    bot_shape = square_p(rad=rr)
    bot_brim = down(1)(extrude_along_path(shape_pts = bot_shape, path_pts = points))
    return hull()(bot_brim, top_brim)

def assembly():
    slide_c_w = 10
    slide_c_h = 25
    slide_c_d = 10
    slide_c1 = c2cube(slide_c_w, slide_c_h, .1)
    slide_c2 = up(slide_c_d)(c2cube(slide_c_w + slide_c_d, slide_c_h + slide_c_d, .1))
    slide_c = translate([center_x, joystick_y - 1, oah - slide_c_d])(hull()(slide_c1 + slide_c2))
    allholes = holes()
    return shell() - void() - down(1)(allholes) - slide_c


if __name__ == '__main__':
    a = assembly()
    scad_render_to_file(a, file_header='$fn = %s;' % SEGMENTS, include_orig_code=False)

